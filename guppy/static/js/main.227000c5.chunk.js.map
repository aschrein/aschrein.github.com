{"version":3,"sources":["app.jsx","index.jsx"],"names":["_wasm","__webpack_require__","e","then","bind","TextEditorComponent","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","assertThisInitialized","Execute","PauseResume","onResize","glContainer","on","newValue","text","globals","wasm","run","resetGPU","config","dispatchConfig","i","r_images","length","guppy_put_image","guppy_init_framebuffer","guppy_dispatch","console","log","def_value","react_default","a","createElement","className","style","margin","onClick","lib_default","value","ref","mode","theme","name","editorProps","$blockScrolling","autoScrollEditorIntoView","wrapEnabled","height","width","React","Component","ParametersComponent","_this2","onChangeDispatch","key","parent","data","gpuConfig","color","build","MemoryComponent","_this3","updateMemory","_this4","ctx","refs","canvas","getContext","img","onload","drawImage","p","getImageData","r","g","b","toString","rgbToHex","slice","base64","toDataURL","push","image","Image","guppy_get_image","src","display","CanvasComponent","_this5","neededWidth","neededHeight","updateCanvas","scheduleDraw","draw","lastClock","window","removeEventListener","active_mask_history","fillStyle","fillRect","x","y","font","welcomeMessage","textAlign","textBaseline","fillText","history","exec_mask_offset","Math","max","j","alu_active_history","l2_metric_history","hit","miss","evict","floor","samplers_metric_history","GoldenLayoutWrapper","guppy_clock","guppy_get_active_mask","guppy_get_gpu_metric","_this6","group_size","groups_count","cycles_per_iter","DRAM_latency","DRAM_bandwidth","L1_size","L1_latency","L2_size","L2_latency","sampler_cache_size","sampler_latency","VGPRF_per_pe","wave_size","CU_count","ALU_per_cu","waves_per_cu","fd_per_cu","ALU_pipe_len","intervalId","setInterval","timer","content","type","component","title","layout","GoldenLayout","guppy_create_gpu_state","JSON","stringify","updateSize","registerComponent","init","ReactDOM","addEventListener","_this7","input","render","app","document","getElementById"],"mappings":"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","file":"static/js/main.227000c5.chunk.js","sourcesContent":["import GoldenLayout from 'golden-layout';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/main.css';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/assembly_x86';\n// Import a Theme (okadia, github, xcode etc)\nimport 'brace/theme/tomorrow_night_eighties';\nimport { JSONEditor } from 'react-json-editor-viewer';\n\nfunction onChange(newValue) {\n    console.log('change', newValue);\n}\n\nconst _wasm = import(\"guppy_rust\");\n\nclass TextEditorComponent extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.onChange = this.onChange.bind(this);\n        this.Execute = this.Execute.bind(this);\n        this.PauseResume = this.PauseResume.bind(this);\n        this.onResize = this.onResize.bind(this);\n    }\n\n    componentDidMount() {\n        // this.refs.editor.setValue(\n        //     \"ret\"\n        // );\n        this.props.glContainer.on('resize', this.onResize);\n    }\n\n    onChange(newValue) {\n        this.text = newValue;\n    }\n\n    onResize() {\n        // this.refs.editor.resize();\n    }\n\n    PauseResume() {\n        if (this.props.globals().wasm) {\n            this.props.globals().run = !this.props.globals().run;\n        }\n    }\n\n    Execute() {\n        let globals = this.props.globals();\n        if (this.props.globals().wasm) {\n            this.props.globals().resetGPU();\n            let config = this.props.globals().dispatchConfig;\n            for (var i = 0; i < globals.r_images.length; i++) {\n                globals.wasm.guppy_put_image(globals.r_images[i]);\n            }\n            globals.wasm.guppy_init_framebuffer(256, 256);\n            this.props.globals().wasm.guppy_dispatch(\n                this.text,\n                config[\"group_size\"],\n                config[\"groups_count\"]\n            );\n\n            this.props.globals().run = true;\n        } else {\n            console.log(\"[WARNING] wasm in null\");\n        }\n    }\n    render() {\n        let def_value =\n\"jmp ENTRY\\n\\\n\\n\\\n; Distance function\\n\\\n; In   : r32.xyz\\n\\\n; Uses : r33.xyzw, r32.xyzw\\n\\\n; Out  : r32.w\\n\\\nDIST_FN:\\n\\\n\\n\\\n; Sphere_0\\n\\\nsub.f32 r33.xyz, r32.xyz, f3(0.0 0.0 5.0)\\n\\\nlen r33.w, r33.xyz\\n\\\nsub.f32 r33.w, r33.w, f(5.0)\\n\\\n\\n\\\n; Sphere_1\\n\\\nsub.f32 r34.xyz, r32.xyz, f3(0.0 0.0 -5.0)\\n\\\nlen r34.w, r34.xyz\\n\\\nsub.f32 r34.w, r34.w, f(5.0)\\n\\\n\\n\\\n; Smooth min\\n\\\nsub.f32 r34.x, r33.w, r34.w\\n\\\nmul.f32 r34.x, r34.x, f(0.2)\\n\\\nmad.f32 r34.x, r34.x, f(0.5), f(0.5)\\n\\\nclamp r34.x, r34.x\\n\\\n; mul.f32 r34.x, r34.x, r34.x\\n\\\nlerp r32.w, r34.w, r33.w, r34.x\\n\\\n\\n\\\nsub.f32 r34.w, r34.x, f(1.0)\\n\\\nmul.f32 r34.w, r34.w, f(5.)\\n\\\nmad.f32 r32.w, r34.x, r34.w, r32.w\\n\\\n\\n\\\n\\n\\\npop_mask\\n\\\n\\n\\\nENTRY:\\n\\\n; Figure out where we are in the screen space\\n\\\nmov r0.xy, thread_id\\n\\\nand r0.x, r0.x, u(255)\\n\\\ndiv.u32 r0.y, r0.y, u(256)\\n\\\nmov r0.zw, r0.xy\\n\\\n\\n\\\n; put the red color as an indiacation of ongoing work\\n\\\nst u0.xyzw, r0.zw, f4(1.0 0.0 0.0 1.0)\\n\\\n\\n\\\n; Normalize screen coordiantes\\n\\\nutof r0.xy, r0.xy\\n\\\n; add 0.5 to fit the center of the texel\\n\\\nadd.f32 r0.xy, r0.xy, f2(0.5 0.5)\\n\\\n; normalize coordinates\\n\\\ndiv.f32 r0.xy, r0.xy, f2(256.0 256.0)\\n\\\n; tx * 2.0 - 1.0\\n\\\nmul.f32 r0.xy, r0.xy, f2(2.0 -2.0)\\n\\\nsub.f32 r0.xy, r0.xy, f2(1.0 -1.0)\\n\\\n\\n\\\n; Setup a simple pinhole camera\\n\\\n; Camera position\\n\\\nmov r1.xyz, f3(10.0 10.0 0.0)\\n\\\n; Camera look vector\\n\\\nmov r2.xyz, f3(-0.7071 -0.7071 0.0)\\n\\\n; Camera right vector\\n\\\nmov r3.xyz, f3(-0.7071 0.7071 0.0)\\n\\\n; Camera up vector\\n\\\nmov r4.xyz, f3(0.0 0.0 1.0)\\n\\\n; Setup ray direction\\n\\\nmov r5.xyz, r2.xyz\\n\\\nmad.f32 r5.xyz, r0.xxx, r3.xyz, r5.xyz\\n\\\nmad.f32 r5.xyz, r0.yyy, r4.xyz, r5.xyz\\n\\\nnorm r5.xyz, r5.xyz\\n\\\n\\n\\\n; Now solve the scene\\n\\\n\\n\\\nmov r15.xyz, r5.xyz\\n\\\nmul.f32 r15.xyz, r15.xyz, f3(0.01 0.01 0.01)\\n\\\nadd.f32 r15.xyz, r15.xyz, r1.xyz\\n\\\n\\n\\\n;jmp LOOP_END\\n\\\n\\n\\\npush_mask LOOP_END\\n\\\nLOOP_BEGIN:\\n\\\n; if (r16.y < 16)\\n\\\nlt.u32 r16.x, r16.y, u(16)\\n\\\nmask_nz r16.x\\n\\\n; Loop body begin\\n\\\nmov r32.xyz, r15.xyz\\n\\\npush_mask RET\\n\\\njmp DIST_FN\\n\\\nRET:\\n\\\ngt.f32 r14.x, r32.w, f(0.001)\\n\\\nsub.u32 r13.x, u(1), r14.x\\n\\\nutof r13.x, r13.x\\n\\\nmask_nz r14.x\\n\\\nmad.f32 r15.xyz, r5.xyz, r32.www, r15.xyz\\n\\\n\\n\\\n; Loop body end\\n\\\n; Increment iteration counter\\n\\\nadd.u32 r16.y, r16.y, u(1)\\n\\\n\\n\\\njmp LOOP_BEGIN\\n\\\n\\n\\\nLOOP_END:\\n\\\n\\n\\\nmov r10.w, f(1.0)\\n\\\nabs.f32 r10.xyz, r5.www\\n\\\n\\n\\\npush_mask L1\\n\\\nmask_nz r13.x\\n\\\nnorm r15.xyz, r15.xyz\\n\\\nsample r10.xyzw, t0.xyzw, s0, r15.xy\\n\\\npop_mask\\n\\\nL1:\\n\\\n; mov r5.xyz, r32.www\\n\\\n; mov r16.y, u(1)\\n\\\n; utof r14.x, r16.y\\n\\\n; div.f32 r14.x, r14.x, f(4.0)\\n\\\n\\n\\\nst u0.xyzw, r0.zw, r10.xyzw\\n\\\nret\";\n\n        let def_value_0 =\n            \"\\\nmov r0.xy, thread_id\\n\\\nand r0.x, r0.x, u(63)\\n\\\ndiv.u32 r0.y, r0.y, u(64)\\n\\\nmov r0.zw, r0.xy\\n\\\nmov r1.xyzw, f4(1.0 0.0 0.0 1.0)\\n\\\nst u0.xyzw, r0.zw, r1.xyzw\\n\\\nret\\n\\\n        \";\n        let def_value_1 =\n            \"\\\n    mov r4.w, lane_id\\n\\\n    utof r4.xyzw, r4.wwww\\n\\\n    mov r4.z, wave_id\\n\\\n    utof r4.z, r4.z\\n\\\n    add.f32 r4.xyzw, r4.xyzw, f4(0.0 0.0 0.0 1.0)\\n\\\n    lt.f32 r4.xy, r4.ww, f2(16.0 8.0)\\n\\\n    utof r4.xy, r4.xy\\n\\\n    br_push r4.x, LB_1, LB_2\\n\\\n    mov r0.x, f(666.0)\\n\\\n    br_push r4.y, LB_0_1, LB_0_2\\n\\\n    mov r0.y, f(666.0)\\n\\\n    pop_mask\\n\\\nLB_0_1:\\n\\\n    mov r0.y, f(777.0)\\n\\\n    pop_mask\\n\\\nLB_0_2:\\n\\\n    pop_mask\\n\\\nLB_1:\\n\\\n    mov r0.x, f(777.0)\\n\\\n    ; push the current wave mask\\n\\\n    push_mask LOOP_END\\n\\\nLOOP_PROLOG:\\n\\\n    lt.f32 r4.x, r4.w, f(24.0)\\n\\\n    add.f32 r4.w, r4.w, f(1.0)\\n\\\n    ; Setting current lane mask\\n\\\n    ; If all lanes are disabled pop_mask is invoked\\n\\\n    ; If mask stack is empty then wave is retired\\n\\\n    mask_nz r4.x\\n\\\nLOOP_BEGIN:\\n\\\n    jmp LOOP_PROLOG\\n\\\nLOOP_END:\\n\\\n    pop_mask\\n\\\nLB_2:\\n\\\n    mov r4.y, lane_id\\n\\\n    utof r4.y, r4.y\\n\\\n    ret\";\n        this.text = def_value;\n        return (\n            <div className=\"ace_editor_container\">\n                <button style={{ margin: 10 }} onClick={this.Execute}>\n                    Execute\n                </button>\n                <button style={{ margin: 10 }} onClick={this.PauseResume}>\n                    Pause/Resume\n                </button>\n                <AceEditor\n                    value={def_value}\n                    ref=\"editor\"\n                    mode=\"assembly_x86\"\n                    theme=\"tomorrow_night_eighties\"\n                    onChange={this.onChange}\n                    name=\"UNIQUE_ID_OF_DIV\"\n                    editorProps={{\n                        $blockScrolling: true\n                    }}\n                    autoScrollEditorIntoView={false}\n                    wrapEnabled={false}\n                    height=\"700px\"\n                    width=\"512px\"\n                />\n            </div>\n        );\n    }\n}\n\nclass ParametersComponent extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.onChange = this.onChange.bind(this);\n        this.onChangeDispatch = this.onChangeDispatch.bind(this);\n    }\n\n    componentDidMount() {\n    }\n\n    onChange(key, value, parent, data) {\n        console.log(\"onchange\", key, value);\n        this.props.globals().gpuConfig[key] = value;\n\n\n    }\n\n    onChangeDispatch(key, value, parent, data) {\n        console.log(\"onChangeDispatch\", key, value);\n        this.props.globals().dispatchConfig[key] = value;\n\n    }\n\n    render() {\n\n        return (\n            <div>\n                <p style={{ color: \"white\", margin: 10 }}>GPU Config</p>\n                <JSONEditor\n                    data={\n                        this.props.globals().gpuConfig\n                    }\n                    onChange={this.onChange}\n                />\n                <p style={{ color: \"white\", margin: 10 }}>Dispatch config</p>\n                <JSONEditor\n                    data={\n                        this.props.globals().dispatchConfig\n                    }\n                    onChange={this.onChangeDispatch}\n                />\n            </div>\n        );\n    }\n}\n\nclass MemoryComponent extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.updateMemory = this.updateMemory.bind(this);\n    }\n\n    componentDidMount() {\n        this.props.globals().updateMemory = this.updateMemory;\n        this.ctx = this.refs.canvas.getContext('2d');\n        let img = this.refs.img;\n        img.onload = () => {\n            this.refs.canvas.width = img.width;\n            this.refs.canvas.height = img.height;\n            this.ctx.drawImage(img, 0, 0);\n            var p = this.ctx.getImageData(0, 0, 1, 1).data;\n            function rgbToHex(r, g, b) {\n                if (r > 255 || g > 255 || b > 255)\n                    throw \"Invalid color component\";\n                return ((r << 16) | (g << 8) | b).toString(16);\n            }\n            var hex = \"#\" + (\"000000\" + rgbToHex(p[0], p[1], p[2])).slice(-6);\n            let base64 = this.refs.canvas.toDataURL('image/png');\n            this.props.globals().r_images.push(base64);\n            // console.log(base64);\n        };\n\n    }\n\n    updateMemory() {\n        let ctx = this.refs.canvas.getContext('2d');\n        let image = new Image();\n        let canvas = this.refs.canvas;\n        let globals = this.props.globals();\n        image.onload = function () {\n            canvas.width = image.width;\n            canvas.height = image.height;\n            ctx.drawImage(image, 0, 0);\n        };\n        let base64 = \"data:image/png;base64,\" + globals.wasm.guppy_get_image(0, false);\n        // console.log(base64);\n        image.src = base64;\n    }\n\n    render() {\n\n        return (\n            <div>\n                <canvas ref=\"canvas\" />\n                <img style={{ display: \"none\" }} ref=\"img\" src=\"img/lenna.png\"></img>\n            </div>\n        );\n    }\n}\n\nclass CanvasComponent extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.neededWidth = 4 * 1024;\n        this.neededHeight = 1024;\n        this.updateCanvas = this.updateCanvas.bind(this);\n        this.onResize = this.onResize.bind(this);\n        this.scheduleDraw = this.scheduleDraw.bind(this);\n    }\n\n    componentDidMount() {\n        this.draw = true;\n        this.ctx = this.refs.canvas.getContext('2d');\n        this.canvas = this.refs.canvas;\n        this.lastClock = 0;\n        this.props.glContainer.on('resize', this.onResize);\n        this.globals = this.props.globals;\n        this.globals().updateCanvas = this.updateCanvas;\n\n        this.updateCanvas();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateCanvas)\n    }\n\n    onResize() {\n        this.updateCanvas();\n    }\n\n    scheduleDraw() {\n        this.draw = true;\n        this.updateCanvas();\n    }\n    updateCanvas() {\n        if (!this.draw) {\n            return;\n        }\n        if (this.globals().active_mask_history) {\n            this.neededWidth = this.globals().active_mask_history.length + 512;\n            this.neededHeight = (this.globals().gpuConfig[\"wave_size\"] + 1) *\n            this.globals().gpuConfig[\"CU_count\"] * this.globals().gpuConfig[\"waves_per_cu\"] + 3*512;\n        }\n        this.draw = false;\n        this.canvas.width = this.neededWidth;\n        this.canvas.height = this.neededHeight;\n        this.ctx.fillStyle = \"#222222\";\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        var x = 0;\n        var y = 0;\n        {\n            var canvas = this.ctx;\n            canvas.font = \"14px Monaco, monospace\";\n            var welcomeMessage = \"(white, black, grey, blue, red) = (active, inactive, disabled, stalled, not enough resources)\";\n            canvas.textAlign = \"start\";\n            canvas.textBaseline = \"top\";\n            canvas.fillStyle = \"#ffffff\";\n            canvas.fillText(welcomeMessage, x, y);\n            y += 16;\n        }\n        if (this.globals().active_mask_history) {\n            let history = this.globals().active_mask_history;\n            if (history.length > 0) {\n                var canvas = this.ctx;\n                canvas.font = \"14px Monaco, monospace\";\n                var welcomeMessage = \"exec mask history\";\n                canvas.textAlign = \"start\";\n                canvas.textBaseline = \"top\";\n                canvas.fillStyle = \"#ffffff\";\n                canvas.fillText(welcomeMessage, x, y);\n                // console.log('updateCanvas', history[0].length);\n\n                var exec_mask_offset = y + 16;\n                for (var i = 0; i < history.length; i++) {\n                    this.neededHeight = Math.max(this.neededHeight, y);\n                    y = exec_mask_offset;\n                    for (var j = 0; j < history[0].length; j++) {\n                        if (j % 32 == 0)\n                            y += 4;\n                        if (history[i][j] == 1) {\n                            this.ctx.fillStyle = \"white\";\n                        } else if (history[i][j] == 0) {\n                            this.ctx.fillStyle = \"black\";\n                        } else if (history[i][j] == 2) {\n                            this.ctx.fillStyle = \"grey\";\n                        } else if (history[i][j] == 3) {\n                            this.ctx.fillStyle = \"blue\";\n                        } else if (history[i][j] == 4) {\n                            this.ctx.fillStyle = \"red\";\n                        }\n                        this.ctx.fillRect(x, y, 1, 1);\n                        y += 1;\n                    }\n                    x += 1;\n                }\n                this.neededWidth = Math.max(this.neededWidth, x);\n            }\n        }\n        if (this.globals().alu_active_history) {\n            let history = this.globals().alu_active_history;\n            if (history.length > 0) {\n                var canvas = this.ctx;\n                canvas.font = \"14px Monaco, monospace\";\n                var welcomeMessage = \"ALU Active history\";\n                canvas.textAlign = \"start\";\n                canvas.textBaseline = \"top\";\n                canvas.fillStyle = \"#ffffff\";\n                canvas.fillText(welcomeMessage, 0, y + 16);\n                var exec_mask_offset = y + 32;\n                x = 0;\n                for (var i = 0; i < history.length; i++) {\n                    this.neededHeight = Math.max(this.neededHeight, y);\n                    y = exec_mask_offset;\n                    for (var j = 100; j >= 0; j--) {\n                        if (j <= history[i]) {\n                            this.ctx.fillStyle = \"white\";\n                        } else {\n                            this.ctx.fillStyle = \"black\";\n                        }\n                        this.ctx.fillRect(x, y, 1, 1);\n                        y += 1;\n                    }\n                    x += 1;\n                }\n                this.neededWidth = Math.max(this.neededWidth, x);\n            }\n        }\n        {\n            var canvas = this.ctx;\n            canvas.font = \"14px Monaco, monospace\";\n            var welcomeMessage = \"(r, g, b) = (hits, misses, evictions)\";\n            canvas.textAlign = \"start\";\n            canvas.textBaseline = \"top\";\n            canvas.fillStyle = \"#ffffff\";\n            canvas.fillText(welcomeMessage, 0, y + 16);\n            y += 16;\n        }\n        if (this.globals().l2_metric_history) {\n            let history = this.globals().l2_metric_history;\n            if (history.length > 0) {\n\n                var canvas = this.ctx;\n                canvas.font = \"14px Monaco, monospace\";\n                var welcomeMessage = \"L2$\";\n                canvas.textAlign = \"start\";\n                canvas.textBaseline = \"top\";\n                canvas.fillStyle = \"#ffffff\";\n                canvas.fillText(welcomeMessage, 0, y + 16);\n                var exec_mask_offset = y + 32;\n                x = 0;\n                var max = 0;\n                for (var i = 0; i < history.length; i++) {\n                    max = Math.max(max, history[i][0], history[i][1], history[i][2]);\n                }\n                // console.log(max);\n                for (var i = 0; i < history.length; i++) {\n                    this.neededHeight = Math.max(this.neededHeight, y);\n                    y = exec_mask_offset;\n                    let hit = 100.0 * history[i][0] / max;\n                    let miss = 100.0 * history[i][1] / max;\n                    let evict = 100.0 * history[i][2] / max;\n                    for (var j = 100; j >= 0; j--) {\n                        var r = 0;\n                        var g = 0;\n                        var b = 0;\n                        if (j <= hit) {\n                            r = 255.0;\n                        }\n                        if (j <= miss) {\n                            g = 255.0;\n                        }\n                        if (j <= evict) {\n                            b = 255.0;\n                        }\n                        this.ctx.fillStyle = 'rgb(' +\n                            Math.floor(r) + ', ' +\n                            Math.floor(g) + ', ' +\n                            Math.floor(b) + ')';\n                        this.ctx.fillRect(x, y, 1, 1);\n                        y += 1;\n                    }\n                    x += 1;\n                }\n                this.neededWidth = Math.max(this.neededWidth, x);\n            }\n        }\n        if (this.globals().samplers_metric_history) {\n            let history = this.globals().samplers_metric_history;\n            if (history.length > 0) {\n\n                var canvas = this.ctx;\n                canvas.font = \"14px Monaco, monospace\";\n                var welcomeMessage = \"Samplers $\";\n                canvas.textAlign = \"start\";\n                canvas.textBaseline = \"top\";\n                canvas.fillStyle = \"#ffffff\";\n                canvas.fillText(welcomeMessage, 0, y + 16);\n                var exec_mask_offset = y + 32;\n                x = 0;\n                var max = 0;\n                for (var i = 0; i < history.length; i++) {\n                    max = Math.max(max, history[i][0], history[i][1], history[i][2]);\n                }\n                // console.log(max);\n                for (var i = 0; i < history.length; i++) {\n                    this.neededHeight = Math.max(this.neededHeight, y);\n                    y = exec_mask_offset;\n                    let hit = 100.0 * history[i][0] / max;\n                    let miss = 100.0 * history[i][1] / max;\n                    let evict = 100.0 * history[i][2] / max;\n                    for (var j = 100; j >= 0; j--) {\n                        var r = 0;\n                        var g = 0;\n                        var b = 0;\n                        if (j <= hit) {\n                            r = 255.0;\n                        }\n                        if (j <= miss) {\n                            g = 255.0;\n                        }\n                        if (j <= evict) {\n                            b = 255.0;\n                        }\n                        this.ctx.fillStyle = 'rgb(' +\n                            Math.floor(r) + ', ' +\n                            Math.floor(g) + ', ' +\n                            Math.floor(b) + ')';\n                        this.ctx.fillRect(x, y, 1, 1);\n                        y += 1;\n                    }\n                    x += 1;\n                }\n                this.neededWidth = Math.max(this.neededWidth, x);\n            }\n        }\n    }\n    render() {\n        return <div>\n            <button style={{ margin: 10 }} onClick={this.scheduleDraw}>\n                Draw\n            </button>\n            <canvas ref=\"canvas\" /> </div>;\n    }\n}\nclass GoldenLayoutWrapper extends React.Component {\n    timer() {\n        if (this.globals.wasm && this.globals.run) {\n            for (var i = 0; i < this.globals.dispatchConfig[\"cycles_per_iter\"]; i++) {\n                if (!this.globals.wasm.guppy_clock()) {\n                    this.globals.run = false;\n                } else {\n                    this.globals.active_mask_history.push(this.globals.wasm.guppy_get_active_mask());\n                    this.globals.alu_active_history.push(this.globals.wasm.guppy_get_gpu_metric(\"ALU active\"));\n                    this.globals.samplers_metric_history.push([\n                        this.globals.wasm.guppy_get_gpu_metric(\"Samplers cache hit\"),\n                        this.globals.wasm.guppy_get_gpu_metric(\"Samplers cache miss\"),\n                        this.globals.wasm.guppy_get_gpu_metric(\"Samplers cache evict\"),\n                    ]);\n                    this.globals.l2_metric_history.push([\n                        this.globals.wasm.guppy_get_gpu_metric(\"L2 hit\"),\n                        this.globals.wasm.guppy_get_gpu_metric(\"L2 miss\"),\n                        this.globals.wasm.guppy_get_gpu_metric(\"L2 evict\"),\n                    ]);\n                    //if (this.globals.updateCanvas)\n                    this.globals.updateMemory();\n                    // this.globals.updateCanvas();\n                }\n            }\n        }\n    }\n    componentDidMount() {\n        this.globals = {};\n        this.globals.dispatchConfig = {\n            \"group_size\": 32, \"groups_count\": 2048, \"cycles_per_iter\": 1\n        };\n        this.globals.gpuConfig = {\n            \"DRAM_latency\": 32,\n            \"DRAM_bandwidth\": 12 * 64, \"L1_size\": 1024, \"L1_latency\": 4,\n            \"L2_size\": 1 * 1024, \"L2_latency\": 16, \"sampler_cache_size\": 1 * 1024,\n            \"sampler_latency\": 16, \"VGPRF_per_pe\": 128, \"wave_size\": 32,\n            \"CU_count\": 16, \"ALU_per_cu\": 1, \"waves_per_cu\": 4, \"fd_per_cu\": 1,\n            \"ALU_pipe_len\": 4\n        };\n        this.globals.wasm = null;\n        this.globals.r_images = [];\n        this.globals.active_mask_history = null;\n        this.globals.samplers_metric_history = null;\n        this.globals.l2_metric_history = null;\n        this.globals.alu_active_history = null;\n\n        this.intervalId = setInterval(this.timer.bind(this), 1);\n        // Build basic golden-layout config\n        const config = {\n            content: [{\n                type: 'row',\n                content: [\n                    {\n                        type: 'column',\n                        content: [\n                            {\n                                type: 'react-component',\n                                component: 'TextEditor',\n                                title: 'TextEditor',\n                                props: { globals: () => this.globals }\n\n                            },\n                            {\n                                type: 'row',\n                                content: [\n                                    {\n                                        type: 'react-component',\n                                        component: 'Parameters',\n                                        title: 'Parameters',\n                                        props: { globals: () => this.globals }\n                                    },\n                                    {\n                                        type: 'react-component',\n                                        component: 'Memory',\n                                        title: 'Memory',\n                                        props: { globals: () => this.globals }\n                                    }\n                                ]\n                            }\n\n                        ]\n                    }\n                    , {\n                        type: 'react-component',\n                        component: 'Canvas',\n                        title: 'Canvas',\n                        props: { globals: () => this.globals }\n\n                    },\n                ]\n            }]\n        };\n\n        var layout = new GoldenLayout(config, this.layout);\n        this.layout = layout;\n        let globals = this.globals;\n        this.globals.resetGPU = function () {\n            globals.run = false;\n            globals.wasm.guppy_create_gpu_state(\n                JSON.stringify(globals.gpuConfig));\n            globals.active_mask_history = [];\n            globals.alu_active_history = [];\n            globals.samplers_metric_history = [];\n            globals.l2_metric_history = [];\n        }\n        _wasm.then(wasm => {\n            layout.updateSize();\n            this.globals.wasm = wasm;\n            this.globals.resetGPU();\n            //console.log(\"wasm loaded\");\n            //console.log(wasm.guppy_get_config());\n\n        });\n        layout.registerComponent('Canvas', CanvasComponent\n        );\n        layout.registerComponent('TextEditor',\n            TextEditorComponent\n        );\n        layout.registerComponent('Parameters',\n            ParametersComponent\n        );\n        layout.registerComponent('Memory',\n            MemoryComponent\n        );\n        layout.init();\n        window.React = React;\n        window.ReactDOM = ReactDOM;\n        window.addEventListener('resize', () => {\n            layout.updateSize();\n        });\n\n\n        //layout.updateSize();\n    }\n\n    render() {\n        return (\n            <div className='goldenLayout'\n                ref={input => this.layout = input} />\n        );\n    }\n}\n\n\nexport default GoldenLayoutWrapper;","import GoldenLayoutWrapper from './app';\nimport reducer from './reducer';\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <GoldenLayoutWrapper />,\n    document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}